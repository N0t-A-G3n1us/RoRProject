require 'rails_helper'
#require 'helpers'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe GamersController, type: :controller do
  include Helpers
  fixtures :all
  
  before do
    @myg=Gamer.create! valid_attributes
    log_in(@myg)
    @myg.role=3     #set to admin
    @myg.save!
    #NEXT LINE DISABLE CANCANCAN 
    allow_any_instance_of(CanCan::ControllerResource).to receive(:load_and_authorize_resource){ nil } 
  end
  # This should return the minimal set of attributes required to create a valid
  # Gamer. As you add validations to Gamer, be sure to
  # adjust the attributes here as well.
  
  let(:valid_attributes){

    { username:  "ValidUser",
   email: "valid@example.com",
   password:              "password",
   password_confirmation: "password",
   activated: true,
   updated: true,
   team_id: 1,
   group_id: 1,
   role: 1,
   description: "username1ss",
   nickname: "otherNickname1",
   nation: "nation1"}
  }


 let(:oth_valid_attributes) { { username:  "OthValidUser",
   email: "other@example.com",
   password:              "password",
   password_confirmation: "password",
   activated: true,
   updated: true,
   team_id: 1,
   group_id: 1,
   role: 1,
   description: "username1",
   nickname: "otherNickname1",
   nation: "nation1"}

 }

 let(:invalid_attributes) {{ username:  "InvalidUser",
   email: "invalid@example.com",
   password:              "password",
   password_confirmation: "passwords",
   activated: true,
   updated: true,
   team_id: 1,
   group_id: 1,
   role: 1,
   description: "username1",
   nickname: "nickname1",
   nation: "nation1"}
 }

 

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GamersController. Be sure to keep this updated too.
  let(:valid_session) {  }

  describe "GET #index" do
    it "returns a success response" do
      #Gamer.create! valid_attributes
      get :index, params: valid_attributes, session: valid_session
      #expect(response).to be_successful 
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      #gamer = Gamer.create! valid_attributes
      gamer=@myg
      expect(current_gamer.username).to eq("ValidUser")
      expect(Gamer.last.username).to eq("ValidUser")
      get :show, params: {id: gamer.id}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: valid_attributes, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      #gamer = Gamer.create! valid_attributes
      gamer=@myg
      get :edit, params: {id: gamer.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Gamer" do
        expect {
          post :create, params: {gamer: oth_valid_attributes}, session: valid_session
          }.to change(Gamer, :count).by(1)
        end

        it "redirects to the created gamer" do
          post :create, params: {gamer: oth_valid_attributes}, session: valid_session
          expect(Gamer.last.email).to eq(oth_valid_attributes[:email])
          #puts "--------->"+Gamer.last.errors.inspect
          expect(response).to redirect_to(root_url)
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: {gamer: invalid_attributes}, session: valid_session
          expect(response).to be_successful
        end
      end
    end


    

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {{ username:  "NewValidUser",
   email: "Newmichfael@example.com",
   password:              "password",
   password_confirmation: "password",
   activated: true,
   updated: true,
   team_id: 1,
   group_id: 1,
   role: 1,
   description: "username1",
   nickname: "nickname1",
   nation: "nation1"}}

        it "updates the requested gamer" do
          #gamer = Gamer.create! valid_attributes
          gamer=@myg
          put :update, params: {id: gamer.to_param, gamer: new_attributes}, session: valid_session
          gamer.reload
        end

        it "redirects of update" do
          #gamer = Gamer.create! valid_attributes
          gamer=@myg
          put :update, params: {id: gamer.to_param, gamer: valid_attributes}, session: valid_session
          expect(response).to redirect_to(edit_account_attribute_url(email: gamer.email))
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'edit' template)" do
          #gamer = Gamer.create! valid_attributes
          gamer=@myg
          put :update, params: {id: gamer.to_param, gamer: invalid_attributes}, session: valid_session
          expect(response).to be_successful
        end
      end
    end


    describe "DELETE #destroy" do
      # it "destroys the requested gamer" do
      #   #gamer = Gamer.create! valid_attributes
      #   gamer=Gamer.create! oth_valid_attributes
        
      #   expect {
      #      delete :destroy, params: {id: gamer.to_param}, session: valid_session
      #     # puts "ERRRORS : "+Gamer.last.errors.inspect

      #     }.to change(Gamer, :count).by(-1)

      #   end

        it "redirects to the gamers list" do
          gamer = Gamer.create! oth_valid_attributes
          delete :destroy, params: {id: gamer.to_param}, session: valid_session
          expect(response).to redirect_to(gamers_url)
        end
      end


    end
